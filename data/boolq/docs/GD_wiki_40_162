INPUT / OUTPUT
In computing , input / output or I / O
( or , informally , io or IO ) is the communication between an information processing system , such as a computer , and the outside world , possibly a human or another information processing system .
Inputs are the signals or data received by the system and outputs are the signals or data sent from it .
The term can also be used as part of an action ; to " perform I / O " is to perform an input or output operation .
The designation of a device as either input or output depends on perspective .
Mouse and keyboards take physical movements that the human user outputs and convert them into input signals that a computer can understand ; the output from these devices is the computer 's input .
Similarly , printers and monitors take signals that a computer outputs as input , and they convert these signals into a representation that human users can understand .
From the human user 's perspective , the process of reading or seeing these representations is receiving output ; this type of interaction between computers and humans is studied in the field of human â€“ computer interaction .
In computer architecture , the combination of the CPU and main memory , to which the CPU can read or write directly using individual instructions , is considered the brain of a computer .
Any transfer of information to or from the CPU / memory combo , for example by reading data from a disk drive , is considered I / O.
The CPU and its supporting circuitry may provide memory - mapped I / O that is used in low - level computer programming , such as in the implementation of device drivers , or may provide access to I / O channels .
An
I / O algorithm is one designed to exploit locality and perform efficiently when exchanging data with a secondary storage device , such as a disk drive .
INTERFACE Section::::Interface .
An
I / O interface is required whenever the I / O device is driven by a processor .
Typically a CPU communicates with devices via a bus .
The interface must have necessary logic to interpret the device address generated by the processor .
Handshaking should be implemented by the interface using appropriate commands ( like BUSY , READY , and WAIT ) , and the processor can communicate with an I / O device through the interface .
If different data formats are being exchanged , the interface must be able to convert serial data to parallel form and vice versa .
Because it would be a waste for a processor to be idle while it waits for data from an input device there must be provision for generating interrupts and the corresponding type numbers for further processing by the processor if required .
A computer that uses memory - mapped I / O accesses hardware by reading and writing to specific memory locations , using the same assembly language instructions that computer would normally use to access memory .
An alternative method is via instruction - based I / O which requires that a CPU have specialised instructions for I / O. Both input and output devices have a data processing rate that can vary greatly .
With some devices able to exchange data at very high speeds direct access to memory ( DMA ) without the continuous aid of a CPU is required .
HIGHER - LEVEL
IMPLEMENTATION Section::::Higher - level implementation .
Higher - level operating system and programming facilities employ separate , more abstract
I / O concepts and primitives .
For example , most operating systems provide application programs with the concept of files .
The C and C++ programming languages , and operating systems in the Unix family , traditionally abstract files and devices as streams , which can be read or written , or sometimes both .
The C standard library provides functions for manipulating streams for input and output .
In the context of the ALGOL 68 programming language , the input and output facilities are collectively referred to as transput .
The ALGOL 68 transput library recognizes the following standard files / devices : codice_1 , codice_2 , codice_3 and codice_4 .
An alternative to special primitive functions is the I / O monad , which permits programs to just describe I
/ O , and the actions are carried out outside the program .
This is notable because the functions would introduce side - effects to any programming language , but this allows purely functional programming to be practical .
CHANNEL
I /
O
Section::::Channel
I / O. Channel
I / O requires the use of instructions that are specifically designed to perform I / O operations .
The I / O instructions address the channel or the channel and device ; the channel asynchronously accesses all other required addressing and control information .
This is similar to DMA , but more flexible .
PORT - MAPPED
I / O Section::::Port - mapped
I / O. Port - mapped I / O also requires the use of special I / O instructions .
Typically one or more ports are assigned to the device , each with a special purpose .
The port numbers are in a separate address space from that used by normal instructions .
DIRECT MEMORY
ACCESS Section::::Direct memory access .
Direct memory access ( DMA ) is a means for devices to transfer large chunks of data to and from memory independently of the CPU .
SEE ALSO
* Asynchronous
I / O
*
I / O bound REFERENCES