FILE TRANSFER PROTOCOL
The File Transfer Protocol ( FTP ) is a standard network protocol used for the transfer of computer files between a client and server on a computer network .
FTP is built on a client - server model architecture using separate control and data connections between the client and the server .
FTP users may authenticate themselves with a clear - text sign - in protocol , normally in the form of a username and password , but can connect anonymously if the server is configured to allow it .
For secure transmission that protects the username and password , and encrypts the content , FTP is often secured with SSL / TLS ( FTPS ) or replaced with SSH File Transfer Protocol ( SFTP ) .
The first FTP client applications were command - line programs developed before operating systems had graphical user interfaces , and are still shipped with most Windows , Unix , and Linux operating systems .
Many FTP clients and automation utilities have since been developed for desktops , servers , mobile devices , and hardware , and FTP has been incorporated into productivity applications , such as HTML editors .
HISTORY OF FTP SERVERS Section::::History of FTP servers .
The original specification for the File Transfer Protocol was written by Abhay Bhushan and published as on 16 April 1971 .
Until 1980 , FTP ran on NCP , the predecessor of TCP / IP .
The protocol was later replaced by a TCP / IP version , ( June 1980 ) and ( October 1985 ) , the current specification .
Several proposed standards amend , for example ( February 1994 ) enables Firewall - Friendly FTP ( passive mode ) , ( June 1997 ) proposes security extensions , ( September 1998 )
adds support for IPv6 and defines a new type of passive mode .
PROTOCOL OVERVIEW COMMUNICATION AND DATA TRANSFER Section::::Protocol overview .
Section::::Communication and data transfer .
FTP may run in active or passive mode , which determines how the data connection is established .
In both cases , the client creates a TCP control connection from a random , usually an unprivileged , port N to the FTP server command port 21 .
*
In active mode , the client starts listening for incoming data connections from the server on port M.
It sends the FTP command PORT M to inform the server on which port it is listening .
The server then initiates a data channel to the client from its port 20 , the FTP server data port .
*
In situations where the client is behind a firewall and unable to accept incoming TCP connections , passive mode may be used .
In this mode , the client uses the control connection to send a PASV command to the server and then receives a server IP address and server port number from the server , which the client then uses to open a data connection from an arbitrary client port to the server IP address and server port number received .
Both modes were updated in September 1998 to support IPv6 .
Further changes were introduced to the passive mode at that time , updating it to extended passive mode .
The server responds over the control connection with three - digit status codes in ASCII with an optional text message .
For example , " 200 " ( or " 200 OK " ) means that the last command was successful .
The numbers represent the code for the response and the optional text represents a human - readable explanation or request ( e.g. < Need account for storing file > ) .
An ongoing transfer of file data over the data connection can be aborted using an interrupt message sent over the control connection .
While transferring data over the network , four data representations can be used : * ASCII mode : Used for text .
Data is converted , if needed , from the sending host 's character representation to " 8-bit ASCII " before transmission , and ( again , if necessary ) to the receiving host 's character representation .
As a consequence , this mode is inappropriate for files that contain data other than plain text .
* Image mode ( commonly called Binary mode ) : The sending machine sends each file byte by byte , and the recipient stores the bytestream as it receives it .
( Image mode support has been recommended for all implementations of FTP ) .
* EBCDIC mode : Used for plain text between hosts using the EBCDIC character set .
* Local mode : Allows two computers with identical setups to send data in a proprietary format without the need to convert it to ASCII .
For text files , different format control and record structure options are provided .
These features were designed to facilitate files containing Telnet or ASA .
Data transfer can be done in any of three modes :
* Stream mode : Data is sent as a continuous stream , relieving FTP from doing any processing .
Rather , all processing is left up to TCP .
No End - of - file indicator is needed , unless the data is divided into records .
* Block mode : FTP breaks the data into several blocks ( block header , byte count , and data field ) and then passes it on to TCP .
* Compressed mode :
Data is compressed using a simple algorithm ( usually run - length encoding ) .
Some FTP software also implements a DEFLATE - based compressed mode , sometimes called " Mode Z " after the command that enables it .
This mode was described in an Internet Draft , but not standardized .
LOGIN Section::::Login .
FTP login uses normal username and password scheme for granting access .
The username is sent to the server using the USER command , and the password is sent using the PASS command .
This sequence is unencrypted " on the wire " , so may be vulnerable to a network sniffing attack .
If the information provided by the client is accepted by the server , the server will send a greeting to the client and the session will commence .
If the server supports it , users may log in without providing login credentials , but the same server may authorize only limited access for such sessions .
ANONYMOUS FTP Section::::Anonymous FTP .
A host that provides an FTP service may provide anonymous FTP access .
Users typically log into the service with an ' anonymous ' ( lower - case and case - sensitive in some FTP servers ) account when prompted for user name .
Although users are commonly asked to send their email address instead of a password , no verification is actually performed on the supplied data .
Many FTP hosts whose purpose is to provide software updates will allow anonymous logins .
NAT AND FIREWALL TRAVERSAL
Section::::NAT and firewall traversal .
FTP normally transfers data by having the server connect back to the client , after the PORT command is sent by the client .
This is problematic for both NATs and firewalls , which do not allow connections from the Internet towards internal hosts .
For NATs , an additional complication is that the representation of the IP addresses and port number in the PORT command refer to the internal host 's IP address and port , rather than the public IP address and port of the NAT .
There are two approaches to solve this problem .
One is that the FTP client and FTP server use the PASV command , which causes the data connection to be established from the FTP client to the server .
This is widely used by modern FTP clients .
Another approach is for the NAT to alter the values of the PORT command , using an application - level gateway for this purpose .
DIFFERENCES FROM HTTP Section::::Differences from HTTP .
HTTP essentially fixes the bugs in FTP that made it inconvenient to use for many small ephemeral transfers as are typical in web pages .
FTP has a stateful control connection which maintains a current working directory and other flags , and each transfer requires a secondary connection through which the data are transferred .
In " passive " mode this secondary connection is from client to server , whereas in the default " active " mode this connection is from server to client .
This apparent role reversal when in active mode , and random port numbers for all transfers , is why firewalls and NAT gateways have such a hard time with FTP .
HTTP is stateless and multiplexes control and data over a single connection from client to server on well - known port numbers , which trivially passes through NAT gateways and is simple for firewalls to manage .
Setting up an FTP control connection is quite slow due to the round - trip delays of sending all of the required commands and awaiting responses , so it is customary to bring up a control connection and hold it open for multiple file transfers rather than drop and re - establish the session afresh each time .
In contrast , HTTP originally dropped the connection after each transfer because doing so was so cheap .
While HTTP has subsequently gained the ability to reuse the TCP connection for multiple transfers , the conceptual model is still of independent requests rather than a session .
When FTP is transferring over the data connection , the control connection is idle .
If the transfer takes too long , the firewall or NAT may decide that the control connection is dead and stop tracking it , effectively breaking the connection and confusing the download .
The single HTTP connection is only idle between requests and it is normal and expected for such connections to be dropped after a time - out .
WEB BROWSER SUPPORT Section::::Web browser support .
Most common web browsers can retrieve files hosted on FTP servers , although they may not support protocol extensions such as FTPS .
When an FTP — rather than an HTTP — URL is supplied , the accessible contents on the remote server are presented in a manner that is similar to that used for other web content .
A full - featured FTP client can be run within Firefox in the form of an extension called FireFTP . SYNTAX Section::::Syntax .
FTP URL syntax is described in , taking the form :
codice_1 ( the bracketed parts are optional ) .
For example , the URL ftp://public.ftp-servers.example.com/mydirectory/myfile.txt represents the file myfile.txt from the directory mydirectory on the server public.ftp-servers.example.com as an FTP resource .
The URL ftp://user001:secretpassword@private.ftp-servers.example.com/mydirectory/myfile.txt adds a specification of the username and password that must be used to access this resource .
More details on specifying a username and password may be found in the browsers ' documentation ( e.g. , Firefox and Internet Explorer ) .
By default , most web browsers use passive ( PASV ) mode , which more easily traverses end - user firewalls .
Some variation has existed in how different browsers treat path resolution in cases where there is a non - root home directory for a user .
SECURITY Section::::Security .
FTP was not designed to be a secure protocol , and has many security weaknesses .
In May 1999 , the authors of listed a vulnerability to the following problems :
* Brute force attack
* FTP bounce attack *
Packet capture
* Port stealing ( guessing the next open port and usurping a legitimate connection )
* Spoofing attack
* Username enumeration
FTP does not encrypt its traffic ; all transmissions are in clear text , and usernames , passwords , commands and data can be read by anyone able to perform packet capture ( sniffing ) on the network .
This problem is common to many of the Internet Protocol specifications ( such as SMTP , Telnet , POP and IMAP ) that were designed prior to the creation of encryption mechanisms such as TLS or SSL .
Common solutions to this problem include :
* Using the secure versions of the insecure protocols , e.g. , FTPS instead of FTP and TelnetS instead of Telnet .
*
* Using a different , more secure protocol that can handle the job , e.g. SSH File Transfer Protocol or Secure Copy Protocol .
*
* Using a secure tunnel such as Secure Shell ( SSH ) or virtual private network ( VPN ) .
* FTP OVER SSH Section::::FTP over SSH .
FTP over SSH is the practice of tunneling a normal FTP session over a Secure Shell connection .
Because FTP uses multiple TCP connections ( unusual for a TCP / IP protocol that is still in use ) , it is particularly difficult to tunnel over SSH .
With many SSH clients , attempting to set up a tunnel for the control channel ( the initial client - to - server connection on port 21 ) will protect only that channel ; when data is transferred , the FTP software at either end sets up new TCP connections ( data channels ) and thus have no confidentiality or integrity protection .
Otherwise , it is necessary for the SSH client software to have specific knowledge of the FTP protocol , to monitor and rewrite FTP control channel messages and autonomously open new packet forwardings for FTP data channels .
Software packages that support this mode include : *
Tectia ConnectSecure ( Win / Linux / Unix ) of SSH Communications Security 's software suite DERIVATIVES FTPS Section::::Derivatives .
Section::::FTPS .
Explicit FTPS is an extension to the FTP standard that allows clients to request FTP sessions to be encrypted .
This is done by sending the " AUTH TLS " command .
The server has the option of allowing or denying connections that do not request TLS .
This protocol extension is defined in .
Implicit FTPS is an outdated standard for FTP that required the use of a SSL or TLS connection .
It was specified to use different ports than plain FTP .
SSH FILE TRANSFER PROTOCOL Section::::SSH File Transfer Protocol .
The SSH file transfer protocol ( chronologically the second of the two protocols abbreviated SFTP )
transfers files and has a similar command set for users , but uses the Secure Shell protocol ( SSH ) to transfer files .
Unlike FTP , it encrypts both commands and data , preventing passwords and sensitive information from being transmitted openly over the network .
It can not interoperate with FTP software .
TRIVIAL FILE TRANSFER PROTOCOL Section::::Trivial File Transfer Protocol .
Trivial File Transfer Protocol ( TFTP ) is a simple , lock - step FTP that allows a client to get a file from or put a file onto a remote host .
One of its primary uses is in the early stages of booting from a local area network , because TFTP is very simple to implement .
TFTP lacks security and most of the advanced features offered by more robust file transfer protocols such as File Transfer Protocol .
TFTP was first standardized in 1981 and the current specification for the protocol can be found in .
SIMPLE FILE TRANSFER
PROTOCOL Section::::Simple File Transfer Protocol .
Simple File Transfer Protocol ( the first protocol abbreviated SFTP ) , as defined by , was proposed as an ( unsecured ) file transfer protocol with a level of complexity intermediate between TFTP and FTP .
It was never widely accepted on the Internet , and is now assigned Historic status by the IETF .
It runs through port 115 , and often receives the initialism of SFTP .
It has a command set of 11 commands and support three types of data transmission : ASCII , binary and continuous .
For systems with a word size that is a multiple of 8 bits , the implementation of binary and continuous is the same .
The protocol also supports login with user ID and password , hierarchical folders and file management ( including rename , delete , upload , download , download with overwrite , and download with append ) .
FTP COMMANDS FTP REPLY CODES Section::::FTP reply codes .
Below is a summary of FTP reply codes that may be returned by an FTP server .
These codes have been standardized in by the IETF .
The reply code is a three - digit value .
The first digit is used to indicate one of three possible outcomes — success , failure , or to indicate an error or incomplete reply : * 2yz – Success reply * 4yz or 5yz – Failure reply
* 1yz or 3yz – Error or Incomplete reply
The second digit defines the kind of error :
* x0z – Syntax .
These replies refer to syntax errors .
* x1z – Information .
Replies to requests for information .
*
x2z – Connections .
Replies referring to the control and data connections .
*
x3z – Authentication and accounting .
Replies for the login process and accounting procedures .
*
x4z – Not defined .
*
x5z – File system .
These replies relay status codes from the server file system .
The third digit of the reply code is used to provide additional detail for each of the categories defined by the second digit .
FTP SERVERS Section::::FTP servers .
Some popular open source and commercial FTP server implementations are : * FileZilla Server ( Windows ) * Pure - FTPd ( Unix ) * Vsftpd ( Unix ) * ProFTPd ( Unix )
* CrushFTP ( Mac , Win , Linux )
* Rumpus ( Mac ) * WingFTP ( Mac , Win )
SEE
ALSO REFERENCES
FURTHER
READING
* – CWD Command of FTP .
July 1975 .
* –
( Standard ) File Transfer Protocol ( FTP ) .
J. Postel , J. Reynolds .
October 1985 .
* – ( Informational ) Firewall - Friendly FTP .
February 1994 .
* – ( Informational ) How to Use Anonymous FTP .
May 1994 .
* – FTP Operation Over Big Address Records ( FOOBAR ) .
June 1994 .
* – Uniform Resource Locators ( URL ) .
December 1994 .
* – ( Proposed Standard ) FTP Security Extensions .
October 1997 .
* –
( Proposed Standard ) Feature negotiation mechanism for the File Transfer Protocol .
August 1998 .
* – ( Proposed Standard ) Extensions for IPv6 , NAT , and Extended passive mode .
September 1998 .
* – ( Informational ) FTP Security Considerations .
May 1999 .
* – ( Proposed Standard ) Internationalization of the File Transfer Protocol .
July 1999 .
* – ( Proposed Standard ) Extensions to FTP .
P. Hethmon .
March 2007 .
* – ( Proposed Standard ) FTP Command and Extension Registry .
March 2010 .
* –
( Proposed Standard ) File Transfer Protocol HOST Command for Virtual Hosts .
March 2014 .
* IANA FTP Commands and Extensions registry – The official registry of FTP Commands and Extensions EXTERNAL LINKS
* FTP Server Online Tester Authentication , encryption , mode and connectivity .